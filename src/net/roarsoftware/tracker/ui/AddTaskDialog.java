package net.roarsoftware.tracker.ui;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.*;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.project.ProjectManager;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import net.roarsoftware.tracker.model.GlobalTaskModel;
import net.roarsoftware.tracker.model.Priority;
import net.roarsoftware.tracker.model.Task;

public class AddTaskDialog extends JDialog {
	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;
	private JTextField descriptionTextField;
	private JComboBox priorityComboBox;
	private JComboBox projectComboBox;
	private JComboBox categoryComboBox;
	private JCheckBox taskHasAMaximumCheckBox;
	private JSpinner maximumHoursSpinner;
	private JSpinner maximumMinutesSpinner;
	private JLabel maxLabel;
	private JPanel maxPanel;
	private Task task;

	public AddTaskDialog(Frame parent) {
		super(parent, "Add Task", true);
		setContentPane(contentPane);
		getRootPane().setDefaultButton(buttonOK);

		buttonOK.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				onOK();
			}
		});

		buttonCancel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				onCancel();
			}
		});

// call onCancel() when cross is clicked
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				onCancel();
			}
		});

// call onCancel() on ESCAPE
		contentPane.registerKeyboardAction(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				onCancel();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		priorityComboBox.setModel(new DefaultComboBoxModel(Priority.values()));
		priorityComboBox.setSelectedItem(Priority.MEDIUM);
		Project[] items = ProjectManager.getInstance().getOpenProjects();
		String[] projects = new String[items.length];
		for (int i = 0; i < items.length; i++) {
			projects[i] = items[i].getName();
		}
		projectComboBox.setModel(new DefaultComboBoxModel(projects));
		categoryComboBox.setModel(new DefaultComboBoxModel(GlobalTaskModel.getInstance().getCategories()));
		maximumHoursSpinner.setModel(new SpinnerNumberModel(0, 0, 99, 1));
		maximumMinutesSpinner.setModel(new SpinnerNumberModel(0, 0, 60, 5));
		pack();
		setLocationRelativeTo(null);
		taskHasAMaximumCheckBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				boolean b = taskHasAMaximumCheckBox.isSelected();
				maxLabel.setEnabled(b);
				for (Component component : maxPanel.getComponents()) {
					component.setEnabled(b);
				}
			}
		});
	}

	private void onOK() {
		long maxDuration = -1;
		if (taskHasAMaximumCheckBox.isSelected()) {
			Integer hours = (Integer) maximumHoursSpinner.getValue();
			Integer minutes = (Integer) maximumMinutesSpinner.getValue();
			maxDuration = (hours * 60 + minutes) * 60 * 1000;
			if (maxDuration == 0) maxDuration = -1;
		}
		if (task == null) {
			task = new Task(descriptionTextField.getText(), categoryComboBox.getSelectedItem().toString(),
					(String) projectComboBox.getSelectedItem(),
					(Priority) priorityComboBox.getSelectedItem(), maxDuration);
		} else {
			task = new Task(task);
			task.setDescription(descriptionTextField.getText());
			task.setCategory(categoryComboBox.getSelectedItem().toString());
			task.setProject(projectComboBox.getSelectedItem().toString());
			task.setPriority((Priority) priorityComboBox.getSelectedItem());
			task.setMaxDuration(maxDuration);
		}
		dispose();
	}

	private void onCancel() {
		task = null;
		dispose();
	}

	public Task getTask() {
		return task;
	}

	public void setTask(Task t) {
		setTitle("Edit Task");
		this.task = t;
		descriptionTextField.setText(t.getDescription());
		categoryComboBox.setSelectedItem(t.getCategory());
		projectComboBox.setSelectedItem(t.getProject());
		priorityComboBox.setSelectedItem(t.getPriority());
		boolean b = t.getMaxDuration() != -1;
		taskHasAMaximumCheckBox.setSelected(b);
		maxLabel.setEnabled(b);
		for (Component component : maxPanel.getComponents()) {
			component.setEnabled(b);
		}
		if (b) {
			long maxMin = t.getMaxDuration() / 1000 / 60;
			maximumHoursSpinner.setValue((int) maxMin / 60);
			maximumMinutesSpinner.setValue((int) maxMin % 60);
		}
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				1, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
		panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0,
				false));
		buttonOK = new JButton();
		buttonOK.setText("OK");
		panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonCancel = new JButton();
		buttonCancel.setText("Cancel");
		panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(7, 4, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0,
				false));
		descriptionTextField = new JTextField();
		panel3.add(descriptionTextField, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, new Dimension(150, -1), null, 0, false));
		final Spacer spacer2 = new Spacer();
		panel3.add(spacer2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final Spacer spacer3 = new Spacer();
		panel3.add(spacer3, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Description:");
		panel3.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Category:");
		panel3.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		priorityComboBox = new JComboBox();
		panel3.add(priorityComboBox, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setText("Priority:");
		panel3.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		projectComboBox = new JComboBox();
		panel3.add(projectComboBox, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		final JLabel label4 = new JLabel();
		label4.setText("Project:");
		panel3.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer4 = new Spacer();
		panel3.add(spacer4, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		categoryComboBox = new JComboBox();
		categoryComboBox.setEditable(true);
		panel3.add(categoryComboBox, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		taskHasAMaximumCheckBox = new JCheckBox();
		taskHasAMaximumCheckBox.setText("Task has a maximum working time");
		panel3.add(taskHasAMaximumCheckBox, new GridConstraints(4, 0, 1, 3, GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		maxLabel = new JLabel();
		maxLabel.setEnabled(false);
		maxLabel.setText("Maximum:");
		panel3.add(maxLabel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		maxPanel = new JPanel();
		maxPanel.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
		panel3.add(maxPanel, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0,
				false));
		maximumHoursSpinner = new JSpinner();
		maximumHoursSpinner.setEnabled(false);
		maxPanel.add(maximumHoursSpinner, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		final JLabel label5 = new JLabel();
		label5.setEnabled(false);
		label5.setText("hrs.");
		maxPanel.add(label5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		maximumMinutesSpinner = new JSpinner();
		maximumMinutesSpinner.setEnabled(false);
		maxPanel.add(maximumMinutesSpinner, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		final JLabel label6 = new JLabel();
		label6.setEnabled(false);
		label6.setText("min.");
		maxPanel.add(label6, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		label1.setLabelFor(descriptionTextField);
		label2.setLabelFor(categoryComboBox);
		label3.setLabelFor(priorityComboBox);
		label4.setLabelFor(projectComboBox);
		maxLabel.setLabelFor(maximumHoursSpinner);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}
}
